// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: src/protos/profile.proto
/* eslint-disable */

import { BinaryReader, BinaryWriter } from "protoscript";
import { JSONrequest, PBrequest } from "twirpscript";
// This is the minimum version supported by the current runtime.
// If this line fails typechecking, breaking changes have been introduced and this
// file needs to be regenerated by running `npx twirpscript`.
export { MIN_SUPPORTED_VERSION_0_0_56 } from "twirpscript";

//========================================//
//     ProfileService Protobuf Client     //
//========================================//

export async function ListProfileDonations(
  listProfileDonationsRequest,
  config
) {
  const response = await PBrequest(
    "/raisely.v1.ProfileService/ListProfileDonations",
    ListProfileDonationsRequest.encode(listProfileDonationsRequest),
    config
  );
  return ListProfileDonationsResponse.decode(response);
}

export async function ListProfiles(listProfilesRequest, config) {
  const response = await PBrequest(
    "/raisely.v1.ProfileService/ListProfiles",
    ListProfilesRequest.encode(listProfilesRequest),
    config
  );
  return ListProfilesResponse.decode(response);
}

export async function CreateProfileDonation(
  createProfileDonationRequest,
  config
) {
  const response = await PBrequest(
    "/raisely.v1.ProfileService/CreateProfileDonation",
    CreateProfileDonationRequest.encode(createProfileDonationRequest),
    config
  );
  return CreateProfileDonationResponse.decode(response);
}

export async function CreateCampaignDonation(
  createCampaignDonationRequest,
  config
) {
  const response = await PBrequest(
    "/raisely.v1.ProfileService/CreateCampaignDonation",
    CreateCampaignDonationRequest.encode(createCampaignDonationRequest),
    config
  );
  return CreateCampaignDonationResponse.decode(response);
}

//========================================//
//       ProfileService JSON Client       //
//========================================//

export async function ListProfileDonationsJSON(
  listProfileDonationsRequest,
  config
) {
  const response = await JSONrequest(
    "/raisely.v1.ProfileService/ListProfileDonations",
    ListProfileDonationsRequestJSON.encode(listProfileDonationsRequest),
    config
  );
  return ListProfileDonationsResponseJSON.decode(response);
}

export async function ListProfilesJSON(listProfilesRequest, config) {
  const response = await JSONrequest(
    "/raisely.v1.ProfileService/ListProfiles",
    ListProfilesRequestJSON.encode(listProfilesRequest),
    config
  );
  return ListProfilesResponseJSON.decode(response);
}

export async function CreateProfileDonationJSON(
  createProfileDonationRequest,
  config
) {
  const response = await JSONrequest(
    "/raisely.v1.ProfileService/CreateProfileDonation",
    CreateProfileDonationRequestJSON.encode(createProfileDonationRequest),
    config
  );
  return CreateProfileDonationResponseJSON.decode(response);
}

export async function CreateCampaignDonationJSON(
  createCampaignDonationRequest,
  config
) {
  const response = await JSONrequest(
    "/raisely.v1.ProfileService/CreateCampaignDonation",
    CreateCampaignDonationRequestJSON.encode(createCampaignDonationRequest),
    config
  );
  return CreateCampaignDonationResponseJSON.decode(response);
}

export function createProfileService(service) {
  return {
    name: "raisely.v1.ProfileService",
    methods: {
      ListProfileDonations: {
        name: "ListProfileDonations",
        handler: service.ListProfileDonations,
        input: {
          protobuf: ListProfileDonationsRequest,
          json: ListProfileDonationsRequestJSON,
        },
        output: {
          protobuf: ListProfileDonationsResponse,
          json: ListProfileDonationsResponseJSON,
        },
      },
      ListProfiles: {
        name: "ListProfiles",
        handler: service.ListProfiles,
        input: { protobuf: ListProfilesRequest, json: ListProfilesRequestJSON },
        output: {
          protobuf: ListProfilesResponse,
          json: ListProfilesResponseJSON,
        },
      },
      CreateProfileDonation: {
        name: "CreateProfileDonation",
        handler: service.CreateProfileDonation,
        input: {
          protobuf: CreateProfileDonationRequest,
          json: CreateProfileDonationRequestJSON,
        },
        output: {
          protobuf: CreateProfileDonationResponse,
          json: CreateProfileDonationResponseJSON,
        },
      },
      CreateCampaignDonation: {
        name: "CreateCampaignDonation",
        handler: service.CreateCampaignDonation,
        input: {
          protobuf: CreateCampaignDonationRequest,
          json: CreateCampaignDonationRequestJSON,
        },
        output: {
          protobuf: CreateCampaignDonationResponse,
          json: CreateCampaignDonationResponseJSON,
        },
      },
    },
  };
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const Currency = {
  UNSPECIFIED: "UNSPECIFIED",
  USD: "USD",
  AUD: "AUD",
  EUR: "EUR",
  /**
   * @private
   */
  _fromInt: function (i) {
    switch (i) {
      case 0: {
        return "UNSPECIFIED";
      }
      case 1: {
        return "USD";
      }
      case 2: {
        return "AUD";
      }
      case 3: {
        return "EUR";
      }
      // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
      default: {
        return i;
      }
    }
  },
  /**
   * @private
   */
  _toInt: function (i) {
    switch (i) {
      case "UNSPECIFIED": {
        return 0;
      }
      case "USD": {
        return 1;
      }
      case "AUD": {
        return 2;
      }
      case "EUR": {
        return 3;
      }
      // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
      default: {
        return i;
      }
    }
  },
};

export const ListProfileDonationsRequest = {
  /**
   * Serializes ListProfileDonationsRequest to protobuf.
   */
  encode: function (msg) {
    return ListProfileDonationsRequest._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes ListProfileDonationsRequest from protobuf.
   */
  decode: function (bytes) {
    return ListProfileDonationsRequest._readMessage(
      ListProfileDonationsRequest.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes ListProfileDonationsRequest with all fields set to their default value.
   */
  initialize: function () {
    return {
      profileId: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg, writer) {
    if (msg.profileId) {
      writer.writeString(1, msg.profileId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg, reader) {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.profileId = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const ListProfileDonationsResponse = {
  /**
   * Serializes ListProfileDonationsResponse to protobuf.
   */
  encode: function (msg) {
    return ListProfileDonationsResponse._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes ListProfileDonationsResponse from protobuf.
   */
  decode: function (bytes) {
    return ListProfileDonationsResponse._readMessage(
      ListProfileDonationsResponse.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes ListProfileDonationsResponse with all fields set to their default value.
   */
  initialize: function () {
    return {
      donations: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg, writer) {
    if (msg.donations?.length) {
      writer.writeRepeatedMessage(1, msg.donations, Donation._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg, reader) {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const m = Donation.initialize();
          reader.readMessage(m, Donation._readMessage);
          msg.donations.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const ListProfilesRequest = {
  /**
   * Serializes ListProfilesRequest to protobuf.
   */
  encode: function (_msg) {
    return new Uint8Array();
  },

  /**
   * Deserializes ListProfilesRequest from protobuf.
   */
  decode: function (_bytes) {
    return {};
  },

  /**
   * Initializes ListProfilesRequest with all fields set to their default value.
   */
  initialize: function () {
    return {};
  },

  /**
   * @private
   */
  _writeMessage: function (_msg, writer) {
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (_msg, _reader) {
    return _msg;
  },
};

export const ListProfilesResponse = {
  /**
   * Serializes ListProfilesResponse to protobuf.
   */
  encode: function (msg) {
    return ListProfilesResponse._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes ListProfilesResponse from protobuf.
   */
  decode: function (bytes) {
    return ListProfilesResponse._readMessage(
      ListProfilesResponse.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes ListProfilesResponse with all fields set to their default value.
   */
  initialize: function () {
    return {
      profiles: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg, writer) {
    if (msg.profiles?.length) {
      writer.writeRepeatedMessage(1, msg.profiles, Profile._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg, reader) {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const m = Profile.initialize();
          reader.readMessage(m, Profile._readMessage);
          msg.profiles.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const CreateProfileDonationRequest = {
  /**
   * Serializes CreateProfileDonationRequest to protobuf.
   */
  encode: function (msg) {
    return CreateProfileDonationRequest._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes CreateProfileDonationRequest from protobuf.
   */
  decode: function (bytes) {
    return CreateProfileDonationRequest._readMessage(
      CreateProfileDonationRequest.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes CreateProfileDonationRequest with all fields set to their default value.
   */
  initialize: function () {
    return {
      donation: Donation.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg, writer) {
    if (msg.donation) {
      writer.writeMessage(1, msg.donation, Donation._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg, reader) {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.donation, Donation._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const CreateProfileDonationResponse = {
  /**
   * Serializes CreateProfileDonationResponse to protobuf.
   */
  encode: function (_msg) {
    return new Uint8Array();
  },

  /**
   * Deserializes CreateProfileDonationResponse from protobuf.
   */
  decode: function (_bytes) {
    return {};
  },

  /**
   * Initializes CreateProfileDonationResponse with all fields set to their default value.
   */
  initialize: function () {
    return {};
  },

  /**
   * @private
   */
  _writeMessage: function (_msg, writer) {
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (_msg, _reader) {
    return _msg;
  },
};

export const CreateCampaignDonationRequest = {
  /**
   * Serializes CreateCampaignDonationRequest to protobuf.
   */
  encode: function (msg) {
    return CreateCampaignDonationRequest._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes CreateCampaignDonationRequest from protobuf.
   */
  decode: function (bytes) {
    return CreateCampaignDonationRequest._readMessage(
      CreateCampaignDonationRequest.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes CreateCampaignDonationRequest with all fields set to their default value.
   */
  initialize: function () {
    return {
      donation: Donation.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg, writer) {
    if (msg.donation) {
      writer.writeMessage(1, msg.donation, Donation._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg, reader) {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.donation, Donation._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const CreateCampaignDonationResponse = {
  /**
   * Serializes CreateCampaignDonationResponse to protobuf.
   */
  encode: function (_msg) {
    return new Uint8Array();
  },

  /**
   * Deserializes CreateCampaignDonationResponse from protobuf.
   */
  decode: function (_bytes) {
    return {};
  },

  /**
   * Initializes CreateCampaignDonationResponse with all fields set to their default value.
   */
  initialize: function () {
    return {};
  },

  /**
   * @private
   */
  _writeMessage: function (_msg, writer) {
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (_msg, _reader) {
    return _msg;
  },
};

export const Donation = {
  /**
   * Serializes Donation to protobuf.
   */
  encode: function (msg) {
    return Donation._writeMessage(msg, new BinaryWriter()).getResultBuffer();
  },

  /**
   * Deserializes Donation from protobuf.
   */
  decode: function (bytes) {
    return Donation._readMessage(
      Donation.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes Donation with all fields set to their default value.
   */
  initialize: function () {
    return {
      id: "",
      donorName: "",
      amountInCents: 0,
      profileId: "",
      currency: Currency._fromInt(0),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg, writer) {
    if (msg.id) {
      writer.writeString(1, msg.id);
    }
    if (msg.donorName) {
      writer.writeString(2, msg.donorName);
    }
    if (msg.amountInCents) {
      writer.writeUint32(3, msg.amountInCents);
    }
    if (msg.profileId) {
      writer.writeString(4, msg.profileId);
    }
    if (msg.currency && Currency._toInt(msg.currency)) {
      writer.writeEnum(5, Currency._toInt(msg.currency));
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg, reader) {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readString();
          break;
        }
        case 2: {
          msg.donorName = reader.readString();
          break;
        }
        case 3: {
          msg.amountInCents = reader.readUint32();
          break;
        }
        case 4: {
          msg.profileId = reader.readString();
          break;
        }
        case 5: {
          msg.currency = Currency._fromInt(reader.readEnum());
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Profile = {
  /**
   * Serializes Profile to protobuf.
   */
  encode: function (msg) {
    return Profile._writeMessage(msg, new BinaryWriter()).getResultBuffer();
  },

  /**
   * Deserializes Profile from protobuf.
   */
  decode: function (bytes) {
    return Profile._readMessage(Profile.initialize(), new BinaryReader(bytes));
  },

  /**
   * Initializes Profile with all fields set to their default value.
   */
  initialize: function () {
    return {
      id: "",
      name: "",
      totalInCents: 0,
      parentId: "",
      currency: Currency._fromInt(0),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg, writer) {
    if (msg.id) {
      writer.writeString(1, msg.id);
    }
    if (msg.name) {
      writer.writeString(2, msg.name);
    }
    if (msg.totalInCents) {
      writer.writeUint32(3, msg.totalInCents);
    }
    if (msg.parentId) {
      writer.writeString(4, msg.parentId);
    }
    if (msg.currency && Currency._toInt(msg.currency)) {
      writer.writeEnum(5, Currency._toInt(msg.currency));
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg, reader) {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readString();
          break;
        }
        case 2: {
          msg.name = reader.readString();
          break;
        }
        case 3: {
          msg.totalInCents = reader.readUint32();
          break;
        }
        case 4: {
          msg.parentId = reader.readString();
          break;
        }
        case 5: {
          msg.currency = Currency._fromInt(reader.readEnum());
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const CurrencyJSON = {
  UNSPECIFIED: "UNSPECIFIED",
  USD: "USD",
  AUD: "AUD",
  EUR: "EUR",
  /**
   * @private
   */
  _fromInt: function (i) {
    switch (i) {
      case 0: {
        return "UNSPECIFIED";
      }
      case 1: {
        return "USD";
      }
      case 2: {
        return "AUD";
      }
      case 3: {
        return "EUR";
      }
      // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
      default: {
        return i;
      }
    }
  },
  /**
   * @private
   */
  _toInt: function (i) {
    switch (i) {
      case "UNSPECIFIED": {
        return 0;
      }
      case "USD": {
        return 1;
      }
      case "AUD": {
        return 2;
      }
      case "EUR": {
        return 3;
      }
      // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
      default: {
        return i;
      }
    }
  },
};

export const ListProfileDonationsRequestJSON = {
  /**
   * Serializes ListProfileDonationsRequest to JSON.
   */
  encode: function (msg) {
    return JSON.stringify(ListProfileDonationsRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes ListProfileDonationsRequest from JSON.
   */
  decode: function (json) {
    return ListProfileDonationsRequestJSON._readMessage(
      ListProfileDonationsRequestJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes ListProfileDonationsRequest with all fields set to their default value.
   */
  initialize: function () {
    return {
      profileId: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg) {
    const json = {};
    if (msg.profileId) {
      json["profileId"] = msg.profileId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg, json) {
    const _profileId_ = json["profileId"] ?? json["profile_id"];
    if (_profileId_) {
      msg.profileId = _profileId_;
    }
    return msg;
  },
};

export const ListProfileDonationsResponseJSON = {
  /**
   * Serializes ListProfileDonationsResponse to JSON.
   */
  encode: function (msg) {
    return JSON.stringify(ListProfileDonationsResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes ListProfileDonationsResponse from JSON.
   */
  decode: function (json) {
    return ListProfileDonationsResponseJSON._readMessage(
      ListProfileDonationsResponseJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes ListProfileDonationsResponse with all fields set to their default value.
   */
  initialize: function () {
    return {
      donations: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg) {
    const json = {};
    if (msg.donations?.length) {
      json["donations"] = msg.donations.map(DonationJSON._writeMessage);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg, json) {
    const _donations_ = json["donations"];
    if (_donations_) {
      for (const item of _donations_) {
        const m = Donation.initialize();
        DonationJSON._readMessage(m, item);
        msg.donations.push(m);
      }
    }
    return msg;
  },
};

export const ListProfilesRequestJSON = {
  /**
   * Serializes ListProfilesRequest to JSON.
   */
  encode: function (_msg) {
    return "{}";
  },

  /**
   * Deserializes ListProfilesRequest from JSON.
   */
  decode: function (_json) {
    return {};
  },

  /**
   * Initializes ListProfilesRequest with all fields set to their default value.
   */
  initialize: function () {
    return {};
  },

  /**
   * @private
   */
  _writeMessage: function (_msg) {
    return {};
  },

  /**
   * @private
   */
  _readMessage: function (msg, _json) {
    return msg;
  },
};

export const ListProfilesResponseJSON = {
  /**
   * Serializes ListProfilesResponse to JSON.
   */
  encode: function (msg) {
    return JSON.stringify(ListProfilesResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes ListProfilesResponse from JSON.
   */
  decode: function (json) {
    return ListProfilesResponseJSON._readMessage(
      ListProfilesResponseJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes ListProfilesResponse with all fields set to their default value.
   */
  initialize: function () {
    return {
      profiles: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg) {
    const json = {};
    if (msg.profiles?.length) {
      json["profiles"] = msg.profiles.map(ProfileJSON._writeMessage);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg, json) {
    const _profiles_ = json["profiles"];
    if (_profiles_) {
      for (const item of _profiles_) {
        const m = Profile.initialize();
        ProfileJSON._readMessage(m, item);
        msg.profiles.push(m);
      }
    }
    return msg;
  },
};

export const CreateProfileDonationRequestJSON = {
  /**
   * Serializes CreateProfileDonationRequest to JSON.
   */
  encode: function (msg) {
    return JSON.stringify(CreateProfileDonationRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes CreateProfileDonationRequest from JSON.
   */
  decode: function (json) {
    return CreateProfileDonationRequestJSON._readMessage(
      CreateProfileDonationRequestJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes CreateProfileDonationRequest with all fields set to their default value.
   */
  initialize: function () {
    return {
      donation: DonationJSON.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg) {
    const json = {};
    if (msg.donation) {
      const _donation_ = DonationJSON._writeMessage(msg.donation);
      if (Object.keys(_donation_).length > 0) {
        json["donation"] = _donation_;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg, json) {
    const _donation_ = json["donation"];
    if (_donation_) {
      const m = Donation.initialize();
      DonationJSON._readMessage(m, _donation_);
      msg.donation = m;
    }
    return msg;
  },
};

export const CreateProfileDonationResponseJSON = {
  /**
   * Serializes CreateProfileDonationResponse to JSON.
   */
  encode: function (_msg) {
    return "{}";
  },

  /**
   * Deserializes CreateProfileDonationResponse from JSON.
   */
  decode: function (_json) {
    return {};
  },

  /**
   * Initializes CreateProfileDonationResponse with all fields set to their default value.
   */
  initialize: function () {
    return {};
  },

  /**
   * @private
   */
  _writeMessage: function (_msg) {
    return {};
  },

  /**
   * @private
   */
  _readMessage: function (msg, _json) {
    return msg;
  },
};

export const CreateCampaignDonationRequestJSON = {
  /**
   * Serializes CreateCampaignDonationRequest to JSON.
   */
  encode: function (msg) {
    return JSON.stringify(CreateCampaignDonationRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes CreateCampaignDonationRequest from JSON.
   */
  decode: function (json) {
    return CreateCampaignDonationRequestJSON._readMessage(
      CreateCampaignDonationRequestJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes CreateCampaignDonationRequest with all fields set to their default value.
   */
  initialize: function () {
    return {
      donation: DonationJSON.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg) {
    const json = {};
    if (msg.donation) {
      const _donation_ = DonationJSON._writeMessage(msg.donation);
      if (Object.keys(_donation_).length > 0) {
        json["donation"] = _donation_;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg, json) {
    const _donation_ = json["donation"];
    if (_donation_) {
      const m = Donation.initialize();
      DonationJSON._readMessage(m, _donation_);
      msg.donation = m;
    }
    return msg;
  },
};

export const CreateCampaignDonationResponseJSON = {
  /**
   * Serializes CreateCampaignDonationResponse to JSON.
   */
  encode: function (_msg) {
    return "{}";
  },

  /**
   * Deserializes CreateCampaignDonationResponse from JSON.
   */
  decode: function (_json) {
    return {};
  },

  /**
   * Initializes CreateCampaignDonationResponse with all fields set to their default value.
   */
  initialize: function () {
    return {};
  },

  /**
   * @private
   */
  _writeMessage: function (_msg) {
    return {};
  },

  /**
   * @private
   */
  _readMessage: function (msg, _json) {
    return msg;
  },
};

export const DonationJSON = {
  /**
   * Serializes Donation to JSON.
   */
  encode: function (msg) {
    return JSON.stringify(DonationJSON._writeMessage(msg));
  },

  /**
   * Deserializes Donation from JSON.
   */
  decode: function (json) {
    return DonationJSON._readMessage(
      DonationJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes Donation with all fields set to their default value.
   */
  initialize: function () {
    return {
      id: "",
      donorName: "",
      amountInCents: 0,
      profileId: "",
      currency: Currency._fromInt(0),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg) {
    const json = {};
    if (msg.id) {
      json["id"] = msg.id;
    }
    if (msg.donorName) {
      json["donorName"] = msg.donorName;
    }
    if (msg.amountInCents) {
      json["amountInCents"] = msg.amountInCents;
    }
    if (msg.profileId) {
      json["profileId"] = msg.profileId;
    }
    if (msg.currency && CurrencyJSON._toInt(msg.currency)) {
      json["currency"] = msg.currency;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg, json) {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = _id_;
    }
    const _donorName_ = json["donorName"] ?? json["donor_name"];
    if (_donorName_) {
      msg.donorName = _donorName_;
    }
    const _amountInCents_ = json["amountInCents"] ?? json["amount_in_cents"];
    if (_amountInCents_) {
      msg.amountInCents = _amountInCents_;
    }
    const _profileId_ = json["profileId"] ?? json["profile_id"];
    if (_profileId_) {
      msg.profileId = _profileId_;
    }
    const _currency_ = json["currency"];
    if (_currency_) {
      msg.currency = _currency_;
    }
    return msg;
  },
};

export const ProfileJSON = {
  /**
   * Serializes Profile to JSON.
   */
  encode: function (msg) {
    return JSON.stringify(ProfileJSON._writeMessage(msg));
  },

  /**
   * Deserializes Profile from JSON.
   */
  decode: function (json) {
    return ProfileJSON._readMessage(ProfileJSON.initialize(), JSON.parse(json));
  },

  /**
   * Initializes Profile with all fields set to their default value.
   */
  initialize: function () {
    return {
      id: "",
      name: "",
      totalInCents: 0,
      parentId: "",
      currency: Currency._fromInt(0),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg) {
    const json = {};
    if (msg.id) {
      json["id"] = msg.id;
    }
    if (msg.name) {
      json["name"] = msg.name;
    }
    if (msg.totalInCents) {
      json["totalInCents"] = msg.totalInCents;
    }
    if (msg.parentId) {
      json["parentId"] = msg.parentId;
    }
    if (msg.currency && CurrencyJSON._toInt(msg.currency)) {
      json["currency"] = msg.currency;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg, json) {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = _id_;
    }
    const _name_ = json["name"];
    if (_name_) {
      msg.name = _name_;
    }
    const _totalInCents_ = json["totalInCents"] ?? json["total_in_cents"];
    if (_totalInCents_) {
      msg.totalInCents = _totalInCents_;
    }
    const _parentId_ = json["parentId"] ?? json["parent_id"];
    if (_parentId_) {
      msg.parentId = _parentId_;
    }
    const _currency_ = json["currency"];
    if (_currency_) {
      msg.currency = _currency_;
    }
    return msg;
  },
};
